<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8" />
    <title>Custom Form v1</title>
    <link href="/_layouts/AppDesigner/Content-Cache/Apps/ApplicationDesigner/4.0.5/css/1.8.10/themes/app-designer/jquery-ui.css" rel="stylesheet">
    <link href="/sites/addemos/actionforms/_CWResources/CustomForm.css" rel="stylesheet">
    <!--ActionVars-->
</head>
<body>
    <div id="ActionForm">
        Action Title: <span id="CWActionTitle"></span><br/>
        Action Category: <span id="CWActionCategory"></span><br/>
        <span id="CWActionDescription"></span>
        <div class="FormButtons">
            <button class="Cancel">Cancel</button>
            <button class="Save">Save</button>
        </div>
        <div style="clear:both"></div>
        <div id="TabbedForm">
            <ul>
                <li><a href="#WhatTab">What</a></li>
                <li><a href="#HowTab">How</a></li>
                <li><a href="#ResultTab">Result</a></li>
            </ul>
            <div id="WhatTab">
                <h3>What does overriding an Action Form mean?</h3>
                <p>Overriding an Action Form enables anyone with a web developer skillset to customize the design and logic of a SharePoint form, but allowing the CorasWorks Actions Service to provide the "heavy lifting" while also inheriting the added features of our Actions framework.</p>
                <p>This means chaining Actions, kicking off SharePoint Designer workflows and even executing Service calls are all still possible even when overriding your form's UI.</p>
            </div>
            <div id="HowTab">
                <h3>How does it work?</h3>
                <p>It's pretty ingenious actually...</p>
                <ol>
                	<li>Within an Action Definition, simply provide the URL to the custom form page you wish to override the standard Action form with</li>
                	<li>At runtime, your custom page will be displayed while a Service will automatically inject into the page all the parameters you need to query the Action Definition</li>
                	<li>A basic AJAX call then returns the Action Definition as a JSON object</li>
                	<li>Craft a custom form via standard HTML/JS/CSS or even parse/iterate over the resulting JSON definition to dynamically render a form (see next tab)</li>
                	<li>When you're ready to save, just update the JSON definition with the values you want to save and send it back to the Service</li>
                </ol>
            </div>
            <div id="ResultTab">
                <h3>Sample Result - A Dynamic Form</h3>
                <div id="DynamicForm"></div>
                <button class="HiddenToggle">"Hidden" Action parameters</button>
                <div id="HiddenParameters"></div>
            </div>
        </div>
        <div class="FormButtons">
            <button class="Cancel">Cancel</button>
            <button class="Save">Save</button>
        </div>
        <div style="clear:both"></div>
    </div>
    <script src="/_layouts/AppDesigner/Content-Cache/Apps/ApplicationDesigner/4.0.5/js/jquery-1.10.2.min.js"></script>
    <script src="/_layouts/AppDesigner/Content-Cache/Apps/ApplicationDesigner/4.0.5/js/jquery-ui-1.10.3.custom.min.js"></script>
    <script id="actionjs" src="/_layouts/CorasWorks.Central.Administration/Resources/CorasWorks/Scripts/CWS_ActionControls.js"></script>
    <script src="/_layouts/AppDesigner/Content-Cache/components/caps/1.0.6/caps.js"></script>
    <script src="/sites/addemos/actionforms/_CWResources/CustomForm.js"></script>
</body>
</html>
